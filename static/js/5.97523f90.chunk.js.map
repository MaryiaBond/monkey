{"version":3,"sources":["components/Games/SpaceAnimals/SpaceAnimals.module.css","components/Games/SpaceAnimals/SpaceAnimals.jsx","components/Games/SpaceAnimals/SpaceAnimalsContainer.jsx"],"names":["module","exports","errorText","defaultText","gridContainer","greenColor","redColor","gridGlobal","absolutePos","h1","normModeClass","coolMode","slateMode","close","SpaceAnimals","React","memo","props","initName","animalShortNames","Math","floor","random","length","_useState","useState","_useState2","Object","slicedToArray","modeText","setModeText","_useState3","_useState4","point","setPoint","_useState5","_useState6","count","setCount","_useState7","_useState8","errors","setErrors","_useState9","_useState10","classMode","setClassMode","_useState11","_useState12","trueText","setTrueText","_useState13","_useState14","permanentName","setTrueName","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","react_default","a","createElement","className","classes","react_router_dom","to","AnimalForm","onSubmit","value","includes","enteredName","reduxForm","form","handleSubmit","immutable","autoFocus","name","component","SpaceAnimalsContainer","SpaceAnimals_SpaceAnimals","assign","this","Component","connect","state","games","initializeGetPoint"],"mappings":"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","file":"static/js/5.97523f90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorText\":\"SpaceAnimals_errorText__5qll4\",\"defaultText\":\"SpaceAnimals_defaultText__1UVZk\",\"gridContainer\":\"SpaceAnimals_gridContainer__2rhnZ\",\"greenColor\":\"SpaceAnimals_greenColor__1peBf\",\"redColor\":\"SpaceAnimals_redColor__2yNb5\",\"gridGlobal\":\"SpaceAnimals_gridGlobal__3aBig\",\"absolutePos\":\"SpaceAnimals_absolutePos__37rsy\",\"h1\":\"SpaceAnimals_h1__2Ynn_\",\"normModeClass\":\"SpaceAnimals_normModeClass__26FtO\",\"coolMode\":\"SpaceAnimals_coolMode__3BbOf\",\"slateMode\":\"SpaceAnimals_slateMode__2G8y2\",\"close\":\"SpaceAnimals_close__1O4R0\"};","import React, {useState, useEffect, useRef} from 'react';\r\nimport {reduxForm, Field} from 'redux-form/lib/immutable';\r\nimport classes from '../SpaceAnimals/SpaceAnimals.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst SpaceAnimals = React.memo(props => {\r\n        // const delay = 1000;\r\n\r\n        function useInterval(callback, delay) {\r\n            const savedCallback = useRef();\r\n            // Remember the latest callback.\r\n            useEffect(() => {\r\n                savedCallback.current = callback;\r\n            }, [callback]);\r\n\r\n            // Set up the interval.\r\n            useEffect(() => {\r\n                function tick() {\r\n                    savedCallback.current();\r\n                }\r\n\r\n                if (delay !== null) {\r\n                    let id = setInterval(tick, delay);\r\n                    return () => clearInterval(id);\r\n                }\r\n            }, [delay]);\r\n        }\r\n\r\n        const initName = props.animalShortNames[Math.floor(Math.random() * props.animalShortNames.length)]\r\n        let higher = 1000\r\n        let [modeText, setModeText] = useState(\"Норм режим\");\r\n        const [point, setPoint] = useState(0);\r\n        let [count, setCount] = useState(8);\r\n        let [errors, setErrors] = useState(0);\r\n        let [classMode, setClassMode] = useState('normMode');\r\n        let [trueText, setTrueText] = useState(true);\r\n        let [permanentName, setTrueName] = useState('пано');\r\n        if (count == 0 && errors == 0) {\r\n            setModeText(\"Режим суперчувачка\")\r\n            setCount(10);\r\n            setClassMode('coolMode')\r\n        }\r\n\r\n        if (count == 0 && errors > 0) {\r\n            setModeText(\"Режим улиточкинса\")\r\n            setCount(5);\r\n            setClassMode('slateMode')\r\n            setErrors(errors - 1)\r\n        }\r\n        useInterval(() => {\r\n            // Your custom logic here\r\n            setCount(count - 1);\r\n        }, higher);\r\n\r\n        // useEffect (()=> {\r\n        //     setInterval (timer ++ , 1000)\r\n\r\n        // }, [timer])\r\n\r\n        let checkThisName = (value) => {\r\n            if (permanentName.includes(value.enteredName) && value.enteredName !== \"\") {\r\n                setTrueName(initName)\r\n                setTrueText(true)\r\n                setPoint(point + 1)\r\n            } else {\r\n                setErrors(errors + 1)\r\n                setTrueText(false)\r\n            }\r\n            value.enteredName = \"\";\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.absolutePos}>\r\n                <NavLink to=\"/games\"> <div className={classes.close}>Exit game</div></NavLink>\r\n                <div className={\r\n                    classMode == 'normMode' ?\r\n                        classes.normModeClass + \" \" + classes.gridGlobal :\r\n                        classMode == 'coolMode' ?\r\n                            classes.coolMode + \" \" + classes.gridGlobal :\r\n                            classes.slateMode + \" \" + classes.gridGlobal\r\n                }>\r\n                    <h1 className={classes.h1}>{modeText}</h1>\r\n                    <div className={classes.gridContainer}>\r\n                        <div>\r\n                            <div>Time limit</div>\r\n                            <div className={classes.greenColor}>Current point</div>\r\n                            <div className={classes.redColor}>Current errors</div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={trueText ? classes.defaultText : classes.errorText}>{permanentName}</div>\r\n                        </div>\r\n                        <div>\r\n                            <div>{count}</div>\r\n                            <div>{point}</div>\r\n                            <div>{errors}</div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div>\r\n                        <AnimalForm onSubmit={checkThisName}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\nconst AnimalFormRedux = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field autoFocus={true} name=\"enteredName\" component={\"input\"}/>\r\n        </form>\r\n    )\r\n}\r\nconst AnimalForm = reduxForm({form: \"spaceAnimals\"})(AnimalFormRedux)\r\nexport default SpaceAnimals;\r\n","import React from 'react';\r\nimport SpaceAnimals from './SpaceAnimals';\r\nimport connect from 'react-redux/es/connect/connect';\r\nimport {initializeGetPoint} from '../../../redux/games-reducer'\r\n\r\nclass SpaceAnimalsContainer extends React.Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                Знакомтесь господа, Космические животные! Придумайте им Космические имена чтобы они продолжали чувствовать себя особенными! =) \r\n                <SpaceAnimals  {...this.props} animalShortNames={this.props.animalShortNames} />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\nlet mapStateToProps = (state) => ({\r\n    animalShortNames: state.games.animalShortNames\r\n})\r\n\r\nexport default connect(mapStateToProps, {initializeGetPoint}) (SpaceAnimalsContainer)\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}